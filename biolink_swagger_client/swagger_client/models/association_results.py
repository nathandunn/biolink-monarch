# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssociationResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, num_found=None, facet_pivot=None, facet_counts=None, associations=None, compact_associations=None, objects=None):
        """
        AssociationResults - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start': 'int',
            'num_found': 'int',
            'facet_pivot': 'object',
            'facet_counts': 'object',
            'associations': 'list[Association]',
            'compact_associations': 'list[CompactAssociationSet]',
            'objects': 'list[str]'
        }

        self.attribute_map = {
            'start': 'start',
            'num_found': 'numFound',
            'facet_pivot': 'facet_pivot',
            'facet_counts': 'facet_counts',
            'associations': 'associations',
            'compact_associations': 'compact_associations',
            'objects': 'objects'
        }

        self._start = start
        self._num_found = num_found
        self._facet_pivot = facet_pivot
        self._facet_counts = facet_counts
        self._associations = associations
        self._compact_associations = compact_associations
        self._objects = objects

    @property
    def start(self):
        """
        Gets the start of this AssociationResults.
        Cursor position

        :return: The start of this AssociationResults.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this AssociationResults.
        Cursor position

        :param start: The start of this AssociationResults.
        :type: int
        """

        self._start = start

    @property
    def num_found(self):
        """
        Gets the num_found of this AssociationResults.
        total number of associations matching query

        :return: The num_found of this AssociationResults.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """
        Sets the num_found of this AssociationResults.
        total number of associations matching query

        :param num_found: The num_found of this AssociationResults.
        :type: int
        """

        self._num_found = num_found

    @property
    def facet_pivot(self):
        """
        Gets the facet_pivot of this AssociationResults.
        Populated in facet_pivots is passed

        :return: The facet_pivot of this AssociationResults.
        :rtype: object
        """
        return self._facet_pivot

    @facet_pivot.setter
    def facet_pivot(self, facet_pivot):
        """
        Sets the facet_pivot of this AssociationResults.
        Populated in facet_pivots is passed

        :param facet_pivot: The facet_pivot of this AssociationResults.
        :type: object
        """

        self._facet_pivot = facet_pivot

    @property
    def facet_counts(self):
        """
        Gets the facet_counts of this AssociationResults.
        Mapping between field names and association counts

        :return: The facet_counts of this AssociationResults.
        :rtype: object
        """
        return self._facet_counts

    @facet_counts.setter
    def facet_counts(self, facet_counts):
        """
        Sets the facet_counts of this AssociationResults.
        Mapping between field names and association counts

        :param facet_counts: The facet_counts of this AssociationResults.
        :type: object
        """

        self._facet_counts = facet_counts

    @property
    def associations(self):
        """
        Gets the associations of this AssociationResults.
        Complete representation of full association object, plus evidence

        :return: The associations of this AssociationResults.
        :rtype: list[Association]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """
        Sets the associations of this AssociationResults.
        Complete representation of full association object, plus evidence

        :param associations: The associations of this AssociationResults.
        :type: list[Association]
        """

        self._associations = associations

    @property
    def compact_associations(self):
        """
        Gets the compact_associations of this AssociationResults.
        Compact representation in which objects (e.g. phenotypes) are collected for subject-predicate pairs

        :return: The compact_associations of this AssociationResults.
        :rtype: list[CompactAssociationSet]
        """
        return self._compact_associations

    @compact_associations.setter
    def compact_associations(self, compact_associations):
        """
        Sets the compact_associations of this AssociationResults.
        Compact representation in which objects (e.g. phenotypes) are collected for subject-predicate pairs

        :param compact_associations: The compact_associations of this AssociationResults.
        :type: list[CompactAssociationSet]
        """

        self._compact_associations = compact_associations

    @property
    def objects(self):
        """
        Gets the objects of this AssociationResults.
        List of distinct objects used

        :return: The objects of this AssociationResults.
        :rtype: list[str]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """
        Sets the objects of this AssociationResults.
        List of distinct objects used

        :param objects: The objects of this AssociationResults.
        :type: list[str]
        """

        self._objects = objects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssociationResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
