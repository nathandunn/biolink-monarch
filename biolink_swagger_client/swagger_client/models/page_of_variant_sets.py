# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PageOfVariantSets(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, total=None, page=None, per_page=None, pages=None, items=None):
        """
        PageOfVariantSets - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total': 'int',
            'page': 'int',
            'per_page': 'int',
            'pages': 'int',
            'items': 'list[VariantSet]'
        }

        self.attribute_map = {
            'total': 'total',
            'page': 'page',
            'per_page': 'per_page',
            'pages': 'pages',
            'items': 'items'
        }

        self._total = total
        self._page = page
        self._per_page = per_page
        self._pages = pages
        self._items = items

    @property
    def total(self):
        """
        Gets the total of this PageOfVariantSets.
        Total number of results

        :return: The total of this PageOfVariantSets.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this PageOfVariantSets.
        Total number of results

        :param total: The total of this PageOfVariantSets.
        :type: int
        """

        self._total = total

    @property
    def page(self):
        """
        Gets the page of this PageOfVariantSets.
        Number of this page of results

        :return: The page of this PageOfVariantSets.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this PageOfVariantSets.
        Number of this page of results

        :param page: The page of this PageOfVariantSets.
        :type: int
        """

        self._page = page

    @property
    def per_page(self):
        """
        Gets the per_page of this PageOfVariantSets.
        Number of items per page of results

        :return: The per_page of this PageOfVariantSets.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """
        Sets the per_page of this PageOfVariantSets.
        Number of items per page of results

        :param per_page: The per_page of this PageOfVariantSets.
        :type: int
        """

        self._per_page = per_page

    @property
    def pages(self):
        """
        Gets the pages of this PageOfVariantSets.
        Total number of pages of results

        :return: The pages of this PageOfVariantSets.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """
        Sets the pages of this PageOfVariantSets.
        Total number of pages of results

        :param pages: The pages of this PageOfVariantSets.
        :type: int
        """

        self._pages = pages

    @property
    def items(self):
        """
        Gets the items of this PageOfVariantSets.

        :return: The items of this PageOfVariantSets.
        :rtype: list[VariantSet]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this PageOfVariantSets.

        :param items: The items of this PageOfVariantSets.
        :type: list[VariantSet]
        """

        self._items = items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PageOfVariantSets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
