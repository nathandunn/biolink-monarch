# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BioentitysetApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_entity_set_associations(self, **kwargs):
        """
        Returns compact associations for a given input set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_associations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_set_associations_with_http_info(**kwargs)
        else:
            (data) = self.get_entity_set_associations_with_http_info(**kwargs)
            return data

    def get_entity_set_associations_with_http_info(self, **kwargs):
        """
        Returns compact associations for a given input set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_associations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['background', 'subject', 'object_category', 'object_slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_set_associations" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/bioentityset/associations/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'background' in params:
            query_params['background'] = params['background']
            collection_formats['background'] = 'multi'
        if 'subject' in params:
            query_params['subject'] = params['subject']
            collection_formats['subject'] = 'multi'
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'object_slim' in params:
            query_params['object_slim'] = params['object_slim']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_entity_set_graph_resource(self, **kwargs):
        """
        TODO Graph object spanning all entities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_graph_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_set_graph_resource_with_http_info(**kwargs)
        else:
            (data) = self.get_entity_set_graph_resource_with_http_info(**kwargs)
            return data

    def get_entity_set_graph_resource_with_http_info(self, **kwargs):
        """
        TODO Graph object spanning all entities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_graph_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['background', 'subject', 'object_category', 'object_slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_set_graph_resource" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/bioentityset/graph/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'background' in params:
            query_params['background'] = params['background']
            collection_formats['background'] = 'multi'
        if 'subject' in params:
            query_params['subject'] = params['subject']
            collection_formats['subject'] = 'multi'
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'object_slim' in params:
            query_params['object_slim'] = params['object_slim']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_entity_set_over_representation_analysis(self, object_category, object_category2, **kwargs):
        """
        TODO Over-representation analysis
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_over_representation_analysis(object_category, object_category2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param str object_category2: E.g. phenotype, function (required)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_set_over_representation_analysis_with_http_info(object_category, object_category2, **kwargs)
        else:
            (data) = self.get_entity_set_over_representation_analysis_with_http_info(object_category, object_category2, **kwargs)
            return data

    def get_entity_set_over_representation_analysis_with_http_info(self, object_category, object_category2, **kwargs):
        """
        TODO Over-representation analysis
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_over_representation_analysis_with_http_info(object_category, object_category2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param str object_category2: E.g. phenotype, function (required)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_category', 'object_category2', 'background', 'subject', 'object_slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_set_over_representation_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params) or (params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_entity_set_over_representation_analysis`")
        # verify the required parameter 'object_category2' is set
        if ('object_category2' not in params) or (params['object_category2'] is None):
            raise ValueError("Missing the required parameter `object_category2` when calling `get_entity_set_over_representation_analysis`")


        collection_formats = {}

        resource_path = '/bioentityset/ora/'.replace('{format}', 'json')
        path_params = {}
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']

        query_params = {}
        if 'background' in params:
            query_params['background'] = params['background']
            collection_formats['background'] = 'multi'
        if 'subject' in params:
            query_params['subject'] = params['subject']
            collection_formats['subject'] = 'multi'
        if 'object_category2' in params:
            query_params['object_category'] = params['object_category2']
        if 'object_slim' in params:
            query_params['object_slim'] = params['object_slim']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_entity_set_over_representation_analysis_0(self, object_category, object_category2, **kwargs):
        """
        TODO Over-representation analysis
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_over_representation_analysis_0(object_category, object_category2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param str object_category2: E.g. phenotype, function (required)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_set_over_representation_analysis_0_with_http_info(object_category, object_category2, **kwargs)
        else:
            (data) = self.get_entity_set_over_representation_analysis_0_with_http_info(object_category, object_category2, **kwargs)
            return data

    def get_entity_set_over_representation_analysis_0_with_http_info(self, object_category, object_category2, **kwargs):
        """
        TODO Over-representation analysis
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_over_representation_analysis_0_with_http_info(object_category, object_category2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param str object_category2: E.g. phenotype, function (required)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_category', 'object_category2', 'background', 'subject', 'object_slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_set_over_representation_analysis_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params) or (params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_entity_set_over_representation_analysis_0`")
        # verify the required parameter 'object_category2' is set
        if ('object_category2' not in params) or (params['object_category2'] is None):
            raise ValueError("Missing the required parameter `object_category2` when calling `get_entity_set_over_representation_analysis_0`")


        collection_formats = {}

        resource_path = '/bioentityset/ora/{object_category}/'.replace('{format}', 'json')
        path_params = {}
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']

        query_params = {}
        if 'background' in params:
            query_params['background'] = params['background']
            collection_formats['background'] = 'multi'
        if 'subject' in params:
            query_params['subject'] = params['subject']
            collection_formats['subject'] = 'multi'
        if 'object_category2' in params:
            query_params['object_category'] = params['object_category2']
        if 'object_slim' in params:
            query_params['object_slim'] = params['object_slim']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_entity_set_summary(self, **kwargs):
        """
        Summary statistics for objects associated
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_set_summary_with_http_info(**kwargs)
        else:
            (data) = self.get_entity_set_summary_with_http_info(**kwargs)
            return data

    def get_entity_set_summary_with_http_info(self, **kwargs):
        """
        Summary statistics for objects associated
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_set_summary_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] background: Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests
        :param list[str] subject: Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
        :param str object_category: E.g. phenotype, function
        :param str object_slim: Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['background', 'subject', 'object_category', 'object_slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_set_summary" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/bioentityset/descriptor/counts/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'background' in params:
            query_params['background'] = params['background']
            collection_formats['background'] = 'multi'
        if 'subject' in params:
            query_params['subject'] = params['subject']
            collection_formats['subject'] = 'multi'
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'object_slim' in params:
            query_params['object_slim'] = params['object_slim']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
