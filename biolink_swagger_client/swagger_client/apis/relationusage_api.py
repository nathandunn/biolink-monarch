# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RelationusageApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_relation_usage_between_resource(self, subject_category, object_category, **kwargs):
        """
        All relations used plus count of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_between_resource(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: (required)
        :param str object_category: (required)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_relation_usage_between_resource_with_http_info(subject_category, object_category, **kwargs)
        else:
            (data) = self.get_relation_usage_between_resource_with_http_info(subject_category, object_category, **kwargs)
            return data

    def get_relation_usage_between_resource_with_http_info(self, subject_category, object_category, **kwargs):
        """
        All relations used plus count of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_between_resource_with_http_info(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: (required)
        :param str object_category: (required)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_category', 'object_category', 'evidence', 'subject_taxon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation_usage_between_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params) or (params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_relation_usage_between_resource`")
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params) or (params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_relation_usage_between_resource`")


        collection_formats = {}

        resource_path = '/relation/usage/between/{subject_category}/{object_category}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']

        query_params = {}
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_relation_usage_pivot_label_resource(self, **kwargs):
        """
        Relation usage count for all subj x obj category combinations, showing label
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_pivot_label_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_relation_usage_pivot_label_resource_with_http_info(**kwargs)
        else:
            (data) = self.get_relation_usage_pivot_label_resource_with_http_info(**kwargs)
            return data

    def get_relation_usage_pivot_label_resource_with_http_info(self, **kwargs):
        """
        Relation usage count for all subj x obj category combinations, showing label
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_pivot_label_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['evidence', 'subject_taxon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation_usage_pivot_label_resource" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/relation/usage/pivot/label'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_relation_usage_pivot_resource(self, **kwargs):
        """
        Relation usage count for all subj x obj category combinations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_pivot_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_relation_usage_pivot_resource_with_http_info(**kwargs)
        else:
            (data) = self.get_relation_usage_pivot_resource_with_http_info(**kwargs)
            return data

    def get_relation_usage_pivot_resource_with_http_info(self, **kwargs):
        """
        Relation usage count for all subj x obj category combinations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_pivot_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['evidence', 'subject_taxon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation_usage_pivot_resource" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/relation/usage/pivot/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_relation_usage_resource(self, **kwargs):
        """
        All relations used plus count of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_relation_usage_resource_with_http_info(**kwargs)
        else:
            (data) = self.get_relation_usage_resource_with_http_info(**kwargs)
            return data

    def get_relation_usage_resource_with_http_info(self, **kwargs):
        """
        All relations used plus count of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_relation_usage_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['evidence', 'subject_taxon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation_usage_resource" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/relation/usage/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
