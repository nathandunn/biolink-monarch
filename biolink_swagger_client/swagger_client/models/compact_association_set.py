# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CompactAssociationSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, objects=None, subject=None, relation=None):
        """
        CompactAssociationSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'objects': 'list[str]',
            'subject': 'str',
            'relation': 'str'
        }

        self.attribute_map = {
            'objects': 'objects',
            'subject': 'subject',
            'relation': 'relation'
        }

        self._objects = objects
        self._subject = subject
        self._relation = relation

    @property
    def objects(self):
        """
        Gets the objects of this CompactAssociationSet.
        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)

        :return: The objects of this CompactAssociationSet.
        :rtype: list[str]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """
        Sets the objects of this CompactAssociationSet.
        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)

        :param objects: The objects of this CompactAssociationSet.
        :type: list[str]
        """

        self._objects = objects

    @property
    def subject(self):
        """
        Gets the subject of this CompactAssociationSet.
        Subject of association (what it is about), e.g. MGI:1201606

        :return: The subject of this CompactAssociationSet.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this CompactAssociationSet.
        Subject of association (what it is about), e.g. MGI:1201606

        :param subject: The subject of this CompactAssociationSet.
        :type: str
        """

        self._subject = subject

    @property
    def relation(self):
        """
        Gets the relation of this CompactAssociationSet.
        Relationship type connecting subject and object list

        :return: The relation of this CompactAssociationSet.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """
        Sets the relation of this CompactAssociationSet.
        Relationship type connecting subject and object list

        :param relation: The relation of this CompactAssociationSet.
        :type: str
        """

        self._relation = relation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CompactAssociationSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
