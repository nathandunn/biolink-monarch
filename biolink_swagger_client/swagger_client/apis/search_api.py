# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SearchApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_autocomplete(self, term, **kwargs):
        """
        Returns list of matching concepts or entities using lexical search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_autocomplete(term, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str term: (required)
        :param str engine: Name of engine to perform search
        :param list[str] subclass_of: restrict search to entities that are subclasses of the specified class
        :param int rows: number of rows
        :param str taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param list[str] category: e.g. gene, disease
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_autocomplete_with_http_info(term, **kwargs)
        else:
            (data) = self.get_autocomplete_with_http_info(term, **kwargs)
            return data

    def get_autocomplete_with_http_info(self, term, **kwargs):
        """
        Returns list of matching concepts or entities using lexical search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_autocomplete_with_http_info(term, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str term: (required)
        :param str engine: Name of engine to perform search
        :param list[str] subclass_of: restrict search to entities that are subclasses of the specified class
        :param int rows: number of rows
        :param str taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param list[str] category: e.g. gene, disease
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'engine', 'subclass_of', 'rows', 'taxon', 'category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params) or (params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_autocomplete`")


        collection_formats = {}

        resource_path = '/search/entity/autocomplete/{term}'.replace('{format}', 'json')
        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']

        query_params = {}
        if 'engine' in params:
            query_params['engine'] = params['engine']
        if 'subclass_of' in params:
            query_params['subclass_of'] = params['subclass_of']
            collection_formats['subclass_of'] = 'multi'
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'taxon' in params:
            query_params['taxon'] = params['taxon']
        if 'category' in params:
            query_params['category'] = params['category']
            collection_formats['category'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_search_entities(self, term, **kwargs):
        """
        Returns list of matching concepts or entities using lexical search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_search_entities(term, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str term: search string, e.g. shh, parkinson, femur (required)
        :param str engine: Name of engine to perform search
        :param list[str] subclass_of: restrict search to entities that are subclasses of the specified class
        :param int rows: number of rows
        :param str taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param list[str] category: e.g. gene, disease
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_search_entities_with_http_info(term, **kwargs)
        else:
            (data) = self.get_search_entities_with_http_info(term, **kwargs)
            return data

    def get_search_entities_with_http_info(self, term, **kwargs):
        """
        Returns list of matching concepts or entities using lexical search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_search_entities_with_http_info(term, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str term: search string, e.g. shh, parkinson, femur (required)
        :param str engine: Name of engine to perform search
        :param list[str] subclass_of: restrict search to entities that are subclasses of the specified class
        :param int rows: number of rows
        :param str taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param list[str] category: e.g. gene, disease
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'engine', 'subclass_of', 'rows', 'taxon', 'category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params) or (params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_search_entities`")


        collection_formats = {}

        resource_path = '/search/entity/{term}'.replace('{format}', 'json')
        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']

        query_params = {}
        if 'engine' in params:
            query_params['engine'] = params['engine']
        if 'subclass_of' in params:
            query_params['subclass_of'] = params['subclass_of']
            collection_formats['subclass_of'] = 'multi'
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'taxon' in params:
            query_params['taxon'] = params['taxon']
        if 'category' in params:
            query_params['category'] = params['category']
            collection_formats['category'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
