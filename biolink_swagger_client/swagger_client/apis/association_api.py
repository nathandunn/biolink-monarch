# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AssociationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_association_object(self, id, **kwargs):
        """
        Returns the association with a given identifier
        An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_object(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_association_object_with_http_info(id, **kwargs)
        else:
            (data) = self.get_association_object_with_http_info(id, **kwargs)
            return data

    def get_association_object_with_http_info(self, id, **kwargs):
        """
        Returns the association with a given identifier
        An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_object_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fl_excludes_evidence', 'subject', 'map_identifiers', 'object', 'evidence', 'subject_taxon', 'rows', 'page', 'graphize']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_association_object`")


        collection_formats = {}

        resource_path = '/association/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'subject' in params:
            query_params['subject'] = params['subject']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Association]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_association_search(self, **kwargs):
        """
        Generalized search over complete corpus of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_association_search_with_http_info(**kwargs)
        else:
            (data) = self.get_association_search_with_http_info(**kwargs)
            return data

    def get_association_search_with_http_info(self, **kwargs):
        """
        Generalized search over complete corpus of associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fl_excludes_evidence', 'subject', 'map_identifiers', 'object', 'evidence', 'subject_taxon', 'rows', 'page', 'graphize']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/association/find/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'subject' in params:
            query_params['subject'] = params['subject']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_association_search_0(self, subject_category, object_category, **kwargs):
        """
        Returns list of matching associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search_0(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: CATEGORY of entity at link SUBJECT (source), e.g. gene, disease, genotype (required)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_association_search_0_with_http_info(subject_category, object_category, **kwargs)
        else:
            (data) = self.get_association_search_0_with_http_info(subject_category, object_category, **kwargs)
            return data

    def get_association_search_0_with_http_info(self, subject_category, object_category, **kwargs):
        """
        Returns list of matching associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search_0_with_http_info(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: CATEGORY of entity at link SUBJECT (source), e.g. gene, disease, genotype (required)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_category', 'object_category', 'fl_excludes_evidence', 'subject', 'map_identifiers', 'object', 'evidence', 'subject_taxon', 'rows', 'page', 'graphize']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_search_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params) or (params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_association_search_0`")
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params) or (params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_association_search_0`")


        collection_formats = {}

        resource_path = '/association/find/{subject_category}/'.replace('{format}', 'json')
        path_params = {}
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']

        query_params = {}
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'subject' in params:
            query_params['subject'] = params['subject']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_association_search_1(self, subject_category, object_category, **kwargs):
        """
        Returns list of matching associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search_1(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: CATEGORY of entity at link SUBJECT (source), e.g. gene, disease, genotype (required)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_association_search_1_with_http_info(subject_category, object_category, **kwargs)
        else:
            (data) = self.get_association_search_1_with_http_info(subject_category, object_category, **kwargs)
            return data

    def get_association_search_1_with_http_info(self, subject_category, object_category, **kwargs):
        """
        Returns list of matching associations
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_association_search_1_with_http_info(subject_category, object_category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_category: CATEGORY of entity at link SUBJECT (source), e.g. gene, disease, genotype (required)
        :param str object_category: CATEGORY of entity at link OBJECT (target), e.g. phenotype, disease (required)
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str subject: SUBJECT id, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357. Includes inferred by default
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene
        :param str object: OBJECT id, e.g. HP:0011927. Includes inferred by default
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
        :param int rows: number of rows
        :param int page: Page number
        :param bool graphize: If set, includes graph object in response
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_category', 'object_category', 'fl_excludes_evidence', 'subject', 'map_identifiers', 'object', 'evidence', 'subject_taxon', 'rows', 'page', 'graphize']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_search_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params) or (params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_association_search_1`")
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params) or (params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_association_search_1`")


        collection_formats = {}

        resource_path = '/association/find/{subject_category}/{object_category}/'.replace('{format}', 'json')
        path_params = {}
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']

        query_params = {}
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'subject' in params:
            query_params['subject'] = params['subject']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_associations_from(self, object, subject, **kwargs):
        """
        Returns associations connecting two entities
        Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_from(object, subject, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: E.g. e.g. MP:0013765, can also be a biological entity such as a gene (required)
        :param str subject: E.g. e.g. MGI:1342287 (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_associations_from_with_http_info(object, subject, **kwargs)
        else:
            (data) = self.get_associations_from_with_http_info(object, subject, **kwargs)
            return data

    def get_associations_from_with_http_info(self, object, subject, **kwargs):
        """
        Returns associations connecting two entities
        Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_from_with_http_info(object, subject, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: E.g. e.g. MP:0013765, can also be a biological entity such as a gene (required)
        :param str subject: E.g. e.g. MGI:1342287 (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'subject', 'use_compact_associations', 'fl_excludes_evidence', 'map_identifiers', 'subject_taxon', 'graphize', 'evidence', 'subject_category', 'rows', 'page', 'object_category', 'slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_from" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object' is set
        if ('object' not in params) or (params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `get_associations_from`")
        # verify the required parameter 'subject' is set
        if ('subject' not in params) or (params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `get_associations_from`")


        collection_formats = {}

        resource_path = '/association/between/{subject}/{object}'.replace('{format}', 'json')
        path_params = {}
        if 'object' in params:
            path_params['object'] = params['object']
        if 'subject' in params:
            path_params['subject'] = params['subject']

        query_params = {}
        if 'use_compact_associations' in params:
            query_params['use_compact_associations'] = params['use_compact_associations']
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_category' in params:
            query_params['subject_category'] = params['subject_category']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'slim' in params:
            query_params['slim'] = params['slim']
            collection_formats['slim'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_associations_from_0(self, subject, **kwargs):
        """
        Returns list of matching associations starting from a given subject (source)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_from_0(subject, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject: Return associations emanating from this node, e.g. specifying NCBIGene:84570 will return gene-phenotype, gene-function etc for this gene (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_associations_from_0_with_http_info(subject, **kwargs)
        else:
            (data) = self.get_associations_from_0_with_http_info(subject, **kwargs)
            return data

    def get_associations_from_0_with_http_info(self, subject, **kwargs):
        """
        Returns list of matching associations starting from a given subject (source)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_from_0_with_http_info(subject, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject: Return associations emanating from this node, e.g. specifying NCBIGene:84570 will return gene-phenotype, gene-function etc for this gene (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'use_compact_associations', 'fl_excludes_evidence', 'map_identifiers', 'subject_taxon', 'graphize', 'evidence', 'subject_category', 'rows', 'page', 'object_category', 'slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_from_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params) or (params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `get_associations_from_0`")


        collection_formats = {}

        resource_path = '/association/from/{subject}'.replace('{format}', 'json')
        path_params = {}
        if 'subject' in params:
            path_params['subject'] = params['subject']

        query_params = {}
        if 'use_compact_associations' in params:
            query_params['use_compact_associations'] = params['use_compact_associations']
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_category' in params:
            query_params['subject_category'] = params['subject_category']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'slim' in params:
            query_params['slim'] = params['slim']
            collection_formats['slim'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_associations_to(self, object, **kwargs):
        """
        Returns list of matching associations pointing to a given object (target)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_to(object, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: Return associations pointing to this node. E.g. specifying MP:0013765 will return all genes, variants, strains etc annotated with this term. Can also be a biological entity such as a gene (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_associations_to_with_http_info(object, **kwargs)
        else:
            (data) = self.get_associations_to_with_http_info(object, **kwargs)
            return data

    def get_associations_to_with_http_info(self, object, **kwargs):
        """
        Returns list of matching associations pointing to a given object (target)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_associations_to_with_http_info(object, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: Return associations pointing to this node. E.g. specifying MP:0013765 will return all genes, variants, strains etc annotated with this term. Can also be a biological entity such as a gene (required)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param bool fl_excludes_evidence: If set, excludes evidence objects in response
        :param str map_identifiers: Prefix to map all IDs to. E.g. NCBIGene, HP, OMIM, DOID
        :param str subject_taxon: SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferences by default (higher level taxa can be used)
        :param bool graphize: If set, includes graph object in response
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :param str subject_category: e.g. gene, genotype, disease, function (todo: use enum)
        :param int rows: limit on number of rows
        :param int page: Return results starting with this row number
        :param str object_category: e.g. disease, phenotype, gene
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'use_compact_associations', 'fl_excludes_evidence', 'map_identifiers', 'subject_taxon', 'graphize', 'evidence', 'subject_category', 'rows', 'page', 'object_category', 'slim']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object' is set
        if ('object' not in params) or (params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `get_associations_to`")


        collection_formats = {}

        resource_path = '/association/to/{object}'.replace('{format}', 'json')
        path_params = {}
        if 'object' in params:
            path_params['object'] = params['object']

        query_params = {}
        if 'use_compact_associations' in params:
            query_params['use_compact_associations'] = params['use_compact_associations']
        if 'fl_excludes_evidence' in params:
            query_params['fl_excludes_evidence'] = params['fl_excludes_evidence']
        if 'map_identifiers' in params:
            query_params['map_identifiers'] = params['map_identifiers']
        if 'subject_taxon' in params:
            query_params['subject_taxon'] = params['subject_taxon']
        if 'graphize' in params:
            query_params['graphize'] = params['graphize']
        if 'evidence' in params:
            query_params['evidence'] = params['evidence']
        if 'subject_category' in params:
            query_params['subject_category'] = params['subject_category']
        if 'rows' in params:
            query_params['rows'] = params['rows']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'object_category' in params:
            query_params['object_category'] = params['object_category']
        if 'slim' in params:
            query_params['slim'] = params['slim']
            collection_formats['slim'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssociationResults]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
