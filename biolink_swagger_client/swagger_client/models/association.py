# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Association(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, subject_extension=None, slim=None, publications=None, object=None, id=None, type=None, evidence_graph=None, subject=None, provided_by=None, relation=None, qualifiers=None, object_extension=None, evidence_types=None):
        """
        Association - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'subject_extension': 'list[AnnotationExtension]',
            'slim': 'list[str]',
            'publications': 'list[Publication]',
            'object': 'BioObject',
            'id': 'str',
            'type': 'str',
            'evidence_graph': 'Graph',
            'subject': 'BioObject',
            'provided_by': 'list[str]',
            'relation': 'Relation',
            'qualifiers': 'list[AssociationPropertyValue]',
            'object_extension': 'list[AnnotationExtension]',
            'evidence_types': 'list[NamedObject]'
        }

        self.attribute_map = {
            'subject_extension': 'subject_extension',
            'slim': 'slim',
            'publications': 'publications',
            'object': 'object',
            'id': 'id',
            'type': 'type',
            'evidence_graph': 'evidence_graph',
            'subject': 'subject',
            'provided_by': 'provided_by',
            'relation': 'relation',
            'qualifiers': 'qualifiers',
            'object_extension': 'object_extension',
            'evidence_types': 'evidence_types'
        }

        self._subject_extension = subject_extension
        self._slim = slim
        self._publications = publications
        self._object = object
        self._id = id
        self._type = type
        self._evidence_graph = evidence_graph
        self._subject = subject
        self._provided_by = provided_by
        self._relation = relation
        self._qualifiers = qualifiers
        self._object_extension = object_extension
        self._evidence_types = evidence_types

    @property
    def subject_extension(self):
        """
        Gets the subject_extension of this Association.

        :return: The subject_extension of this Association.
        :rtype: list[AnnotationExtension]
        """
        return self._subject_extension

    @subject_extension.setter
    def subject_extension(self, subject_extension):
        """
        Sets the subject_extension of this Association.

        :param subject_extension: The subject_extension of this Association.
        :type: list[AnnotationExtension]
        """

        self._subject_extension = subject_extension

    @property
    def slim(self):
        """
        Gets the slim of this Association.
        Objects mapped to a slim

        :return: The slim of this Association.
        :rtype: list[str]
        """
        return self._slim

    @slim.setter
    def slim(self, slim):
        """
        Sets the slim of this Association.
        Objects mapped to a slim

        :param slim: The slim of this Association.
        :type: list[str]
        """

        self._slim = slim

    @property
    def publications(self):
        """
        Gets the publications of this Association.
        Publications supporting association, extracted from evidence graph

        :return: The publications of this Association.
        :rtype: list[Publication]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """
        Sets the publications of this Association.
        Publications supporting association, extracted from evidence graph

        :param publications: The publications of this Association.
        :type: list[Publication]
        """

        self._publications = publications

    @property
    def object(self):
        """
        Gets the object of this Association.
        Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330

        :return: The object of this Association.
        :rtype: BioObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this Association.
        Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330

        :param object: The object of this Association.
        :type: BioObject
        """

        self._object = object

    @property
    def id(self):
        """
        Gets the id of this Association.
        Association/annotation unique ID

        :return: The id of this Association.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Association.
        Association/annotation unique ID

        :param id: The id of this Association.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Association.
        Type of association, e.g. gene-phenotype

        :return: The type of this Association.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Association.
        Type of association, e.g. gene-phenotype

        :param type: The type of this Association.
        :type: str
        """

        self._type = type

    @property
    def evidence_graph(self):
        """
        Gets the evidence_graph of this Association.
        An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object

        :return: The evidence_graph of this Association.
        :rtype: Graph
        """
        return self._evidence_graph

    @evidence_graph.setter
    def evidence_graph(self, evidence_graph):
        """
        Sets the evidence_graph of this Association.
        An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object

        :param evidence_graph: The evidence_graph of this Association.
        :type: Graph
        """

        self._evidence_graph = evidence_graph

    @property
    def subject(self):
        """
        Gets the subject of this Association.
        Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606

        :return: The subject of this Association.
        :rtype: BioObject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Association.
        Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606

        :param subject: The subject of this Association.
        :type: BioObject
        """

        self._subject = subject

    @property
    def provided_by(self):
        """
        Gets the provided_by of this Association.
        Provider of association, e.g. Orphanet, ClinVar

        :return: The provided_by of this Association.
        :rtype: list[str]
        """
        return self._provided_by

    @provided_by.setter
    def provided_by(self, provided_by):
        """
        Sets the provided_by of this Association.
        Provider of association, e.g. Orphanet, ClinVar

        :param provided_by: The provided_by of this Association.
        :type: list[str]
        """

        self._provided_by = provided_by

    @property
    def relation(self):
        """
        Gets the relation of this Association.
        Relationship type connecting subject and object

        :return: The relation of this Association.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """
        Sets the relation of this Association.
        Relationship type connecting subject and object

        :param relation: The relation of this Association.
        :type: Relation
        """

        self._relation = relation

    @property
    def qualifiers(self):
        """
        Gets the qualifiers of this Association.

        :return: The qualifiers of this Association.
        :rtype: list[AssociationPropertyValue]
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers):
        """
        Sets the qualifiers of this Association.

        :param qualifiers: The qualifiers of this Association.
        :type: list[AssociationPropertyValue]
        """

        self._qualifiers = qualifiers

    @property
    def object_extension(self):
        """
        Gets the object_extension of this Association.

        :return: The object_extension of this Association.
        :rtype: list[AnnotationExtension]
        """
        return self._object_extension

    @object_extension.setter
    def object_extension(self, object_extension):
        """
        Sets the object_extension of this Association.

        :param object_extension: The object_extension of this Association.
        :type: list[AnnotationExtension]
        """

        self._object_extension = object_extension

    @property
    def evidence_types(self):
        """
        Gets the evidence_types of this Association.
        Evidence types (ECO classes) extracted from evidence graph

        :return: The evidence_types of this Association.
        :rtype: list[NamedObject]
        """
        return self._evidence_types

    @evidence_types.setter
    def evidence_types(self, evidence_types):
        """
        Sets the evidence_types of this Association.
        Evidence types (ECO classes) extracted from evidence graph

        :param evidence_types: The evidence_types of this Association.
        :type: list[NamedObject]
        """

        self._evidence_types = evidence_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Association):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
