# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VariantSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, category=None, body=None, title=None, category_id=None, pub_date=None, id=None):
        """
        VariantSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category': 'str',
            'body': 'str',
            'title': 'str',
            'category_id': 'int',
            'pub_date': 'datetime',
            'id': 'int'
        }

        self.attribute_map = {
            'category': 'category',
            'body': 'body',
            'title': 'title',
            'category_id': 'category_id',
            'pub_date': 'pub_date',
            'id': 'id'
        }

        self._category = category
        self._body = body
        self._title = title
        self._category_id = category_id
        self._pub_date = pub_date
        self._id = id

    @property
    def category(self):
        """
        Gets the category of this VariantSet.

        :return: The category of this VariantSet.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this VariantSet.

        :param category: The category of this VariantSet.
        :type: str
        """

        self._category = category

    @property
    def body(self):
        """
        Gets the body of this VariantSet.
        Article content

        :return: The body of this VariantSet.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this VariantSet.
        Article content

        :param body: The body of this VariantSet.
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def title(self):
        """
        Gets the title of this VariantSet.
        Article title

        :return: The title of this VariantSet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this VariantSet.
        Article title

        :param title: The title of this VariantSet.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def category_id(self):
        """
        Gets the category_id of this VariantSet.

        :return: The category_id of this VariantSet.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this VariantSet.

        :param category_id: The category_id of this VariantSet.
        :type: int
        """

        self._category_id = category_id

    @property
    def pub_date(self):
        """
        Gets the pub_date of this VariantSet.

        :return: The pub_date of this VariantSet.
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """
        Sets the pub_date of this VariantSet.

        :param pub_date: The pub_date of this VariantSet.
        :type: datetime
        """

        self._pub_date = pub_date

    @property
    def id(self):
        """
        Gets the id of this VariantSet.
        The unique identifier of a variant set

        :return: The id of this VariantSet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VariantSet.
        The unique identifier of a variant set

        :param id: The id of this VariantSet.
        :type: int
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VariantSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
