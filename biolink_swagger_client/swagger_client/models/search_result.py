# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/monarch-initiative/biolink-api/

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, num_found=None, facet_pivot=None, facet_counts=None):
        """
        SearchResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start': 'int',
            'num_found': 'int',
            'facet_pivot': 'object',
            'facet_counts': 'object'
        }

        self.attribute_map = {
            'start': 'start',
            'num_found': 'numFound',
            'facet_pivot': 'facet_pivot',
            'facet_counts': 'facet_counts'
        }

        self._start = start
        self._num_found = num_found
        self._facet_pivot = facet_pivot
        self._facet_counts = facet_counts

    @property
    def start(self):
        """
        Gets the start of this SearchResult.
        Cursor position

        :return: The start of this SearchResult.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this SearchResult.
        Cursor position

        :param start: The start of this SearchResult.
        :type: int
        """

        self._start = start

    @property
    def num_found(self):
        """
        Gets the num_found of this SearchResult.
        total number of associations matching query

        :return: The num_found of this SearchResult.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """
        Sets the num_found of this SearchResult.
        total number of associations matching query

        :param num_found: The num_found of this SearchResult.
        :type: int
        """

        self._num_found = num_found

    @property
    def facet_pivot(self):
        """
        Gets the facet_pivot of this SearchResult.
        Populated in facet_pivots is passed

        :return: The facet_pivot of this SearchResult.
        :rtype: object
        """
        return self._facet_pivot

    @facet_pivot.setter
    def facet_pivot(self, facet_pivot):
        """
        Sets the facet_pivot of this SearchResult.
        Populated in facet_pivots is passed

        :param facet_pivot: The facet_pivot of this SearchResult.
        :type: object
        """

        self._facet_pivot = facet_pivot

    @property
    def facet_counts(self):
        """
        Gets the facet_counts of this SearchResult.
        Mapping between field names and association counts

        :return: The facet_counts of this SearchResult.
        :rtype: object
        """
        return self._facet_counts

    @facet_counts.setter
    def facet_counts(self, facet_counts):
        """
        Sets the facet_counts of this SearchResult.
        Mapping between field names and association counts

        :param facet_counts: The facet_counts of this SearchResult.
        :type: object
        """

        self._facet_counts = facet_counts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
